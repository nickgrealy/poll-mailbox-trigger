
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'java'

idea.project?.vcs = 'Git'


// --- Setup script specific properties ---

ext {
    /* optional - set variable enforceJavaVersion */
    enforceJavaVersionFlag = project.getProperties().containsKey('enforceJavaVersion')
    javaVersion = project.getProperties().get('enforceJavaVersion') ?: JavaVersion.VERSION_1_6
    compileTasks = [compileJava, compileTestJava, compileGroovy, compileTestGroovy]
}


// --- Setup Global Settings ---

allprojects {

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    repositories {
        mavenLocal()
        mavenCentral()
    }

    ext {
        groovyVersion = '2.4.4'
        customJvmArgs = ['-Xmx1g', '-XX:MaxPermSize=1g']
    }

    dependencies {
        testCompile "junit:junit:4.12"
    }

    configurations {
        providedCompile
    }

    sourceSets.main.compileClasspath += configurations.providedCompile
    sourceSets.test.compileClasspath += configurations.providedCompile
    sourceSets.test.runtimeClasspath += configurations.providedCompile
}


// --- Customise JVM - Low Memory Profile ---

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'

    def jvmOpts = customJvmArgs.join(' ')
    inputs.property("jvmOpts", jvmOpts)
    doLast {
        def optsEnvVar = "DEFAULT_JVM_OPTS"
        scriptFile.write scriptFile.text.replace("$optsEnvVar=\"\"", "$optsEnvVar=\"$jvmOpts\"")
        batchScript.write batchScript.text.replace("set $optsEnvVar=", "set $optsEnvVar=$jvmOpts")
    }
}

allprojects {
	clean{
		delete "out"
		delete ".gradle"
	}

    tasks.matching { it instanceof JavaCompile || it instanceof GroovyCompile }.all {
        options.compilerArgs += ["-Xlint:unchecked", "-Xlint:deprecation"]
        options.fork = true
        options.forkOptions.jvmArgs += customJvmArgs
    }

//    tasks.withType(JavaCompile) {
//        options.fork = true
//        options.forkOptions.jvmArgs += customJvmArgs
//	}
//
//    tasks.withType(GroovyCompile) {
//        configure(groovyOptions.forkOptions) {
//            memoryMaximumSize = '256m'
//            jvmArgs = customJvmArgs
//        }
//    }

    tasks.withType(Test) {
        jvmArgs(customJvmArgs)
        testLogging {
            exceptionFormat = 'full'
        }
    }
}


// --- Custom Tasks ---

task enforceJavaVersionTask << {
    if (enforceJavaVersionFlag){
        def foundVersion = JavaVersion.current()
        if (foundVersion.toString() != enforceJavaVersion.toString()){
            println("\nWARNING: Wrong Java version: required is $enforceJavaVersion, but found $foundVersion \n")
        }
    } else {
        println "Java version not enforced."
    }
}

task showMeCache << {
  configurations.compile.each { println it }
}


// --- Dependencies ---

compileTasks*.dependsOn(enforceJavaVersionTask);


// --- Standalone Functions ---

ext.verifySizeKb = { File file, int expectedSizeKb ->
    int actualSizeKb = file.length() / 1024
    println "Output file size is: ${actualSizeKb} KB"
    assert actualSizeKb <= expectedSizeKb
}
